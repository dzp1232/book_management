<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.dzp.mapper.BookBorrowMapper">
  <resultMap id="BaseResultMap" type="cn.dzp.entity.BookBorrow">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="book_id" jdbcType="BIGINT" property="bookId" />
    <result column="borrow_date" jdbcType="TIMESTAMP" property="borrowDate" />
    <result column="expect_return_date" jdbcType="TIMESTAMP" property="expectReturnDate" />
    <result column="return_date" jdbcType="TIMESTAMP" property="returnDate" />
    <result column="is_overdue" jdbcType="TINYINT" property="isOverdue" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, user_id, book_id, borrow_date, expect_return_date, return_date, is_overdue, 
    gmt_create, gmt_modified
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from book_borrow
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from book_borrow
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="cn.dzp.entity.BookBorrow">
    insert into book_borrow (id, name, user_id, 
      book_id, borrow_date, expect_return_date, 
      return_date, is_overdue, gmt_create, 
      gmt_modified)
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{userId,jdbcType=BIGINT}, 
      #{bookId,jdbcType=BIGINT}, #{borrowDate,jdbcType=TIMESTAMP}, #{expectReturnDate,jdbcType=TIMESTAMP}, 
      #{returnDate,jdbcType=TIMESTAMP}, #{isOverdue,jdbcType=TINYINT}, #{gmtCreate,jdbcType=TIMESTAMP}, 
      #{gmtModified,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.dzp.entity.BookBorrow">
    insert into book_borrow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="bookId != null">
        book_id,
      </if>
      <if test="borrowDate != null">
        borrow_date,
      </if>
      <if test="expectReturnDate != null">
        expect_return_date,
      </if>
      <if test="returnDate != null">
        return_date,
      </if>
      <if test="isOverdue != null">
        is_overdue,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="bookId != null">
        #{bookId,jdbcType=BIGINT},
      </if>
      <if test="borrowDate != null">
        #{borrowDate,jdbcType=TIMESTAMP},
      </if>
      <if test="expectReturnDate != null">
        #{expectReturnDate,jdbcType=TIMESTAMP},
      </if>
      <if test="returnDate != null">
        #{returnDate,jdbcType=TIMESTAMP},
      </if>
      <if test="isOverdue != null">
        #{isOverdue,jdbcType=TINYINT},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.dzp.entity.BookBorrow">
    update book_borrow
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="bookId != null">
        book_id = #{bookId,jdbcType=BIGINT},
      </if>
      <if test="borrowDate != null">
        borrow_date = #{borrowDate,jdbcType=TIMESTAMP},
      </if>
      <if test="expectReturnDate != null">
        expect_return_date = #{expectReturnDate,jdbcType=TIMESTAMP},
      </if>
      <if test="returnDate != null">
        return_date = #{returnDate,jdbcType=TIMESTAMP},
      </if>
      <if test="isOverdue != null">
        is_overdue = #{isOverdue,jdbcType=TINYINT},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.dzp.entity.BookBorrow">
    update book_borrow
    set name = #{name,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=BIGINT},
      book_id = #{bookId,jdbcType=BIGINT},
      borrow_date = #{borrowDate,jdbcType=TIMESTAMP},
      expect_return_date = #{expectReturnDate,jdbcType=TIMESTAMP},
      return_date = #{returnDate,jdbcType=TIMESTAMP},
      is_overdue = #{isOverdue,jdbcType=TINYINT},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>